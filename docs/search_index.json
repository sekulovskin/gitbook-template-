[["index.html", "A GitBook template Chapter 1 Introduction", " A GitBook template Nikola Sekulovski 2021-10-27 Chapter 1 Introduction This is a template GitBook based on A GitBook Example for Teaching and bookdown: Authoring Books and Technical Documents with R Markdown. This is how we would reference a book (Xie, 2015) or Xie (2015). This is how we would reference articles Gu, Mulder, &amp; Hoijtink (2018) or (Hoijtink, Klugkist, &amp; Boelen, 2008). "],["monte-carlo-simulations.html", "Chapter 2 Monte Carlo Simulations 2.1 The Confidence Interval 2.2 The Central Limit Theorem", " Chapter 2 Monte Carlo Simulations library(tidyverse) 2.1 The Confidence Interval In this exercise I will try to repeat the example given by Gerko Vink The main idea of this exercise is to illustrate the nature of the Confidence Interval as described by Neyman (1934) We set a seed to make our results reproducible: set.seed(6465) The first step is to take 100 samples (in this case of size 800) from a normal distributuon with \\(\\mu = 0\\) and \\(\\sigma = 1\\): samples &lt;-plyr::rlply(100, rnorm(800, 0, 1)) Secondly, we need to calculate for the mean of each sample: the absolute bias; standard error lower bound of the 95% confidence interval and upper bound of the 95% confidence interval. We can construct a function that does this: samp_function &lt;- function(x) { m &lt;- mean(x) n &lt;- length(x) se &lt;- 1/sqrt(n) bias &lt;- abs(-0 - m) df &lt;- n - 1 interval &lt;- qt(.975, df) * se return(c(m, bias, se, m - interval, m + interval)) } format &lt;- c(&quot;Mean&quot; = 0, &quot;Bias&quot; = 0, &quot;Std.Err&quot; = 0, &quot;Lower&quot; = 0, &quot;Upper&quot; = 0) Now we use the constructed function samp_function on all 100 samples contained in the object samples. And we also add a new column to the results that indicates which CI of the respective samples does contain \\(\\mu\\). results &lt;- samples %&gt;% vapply(., samp_function, format) %&gt;% t %&gt;% as_tibble %&gt;% mutate(Covered = ifelse(Lower &lt; 0 &amp; Upper &gt; 0, 1, 0)) We can also add a table with the sample statistics of the samples whose CIs do not contain \\(\\mu\\). results %&gt;% filter(Covered ==0) %&gt;% kableExtra::kable(caption = &quot;Here is a table of the samples&quot; ) Table 2.1: Here is a table of the samples Mean Bias Std.Err Lower Upper Covered -0.0945589 0.0945589 0.0353553 -0.1639592 -0.0251585 0 0.0740058 0.0740058 0.0353553 0.0046055 0.1434062 0 And finally we can also make a nice plot illustrating everything that we did so far. lims &lt;- aes(ymax = results$Upper, ymin = results$Lower) ggplot(results, aes(y=Mean, x=1:100, colour = Covered)) + geom_hline(aes(yintercept = 0)) + geom_pointrange(lims) + xlab(&quot;Simulations&quot;) + ylab(&quot;Means and 95% Confidence Intervals&quot;) ## Warning: Use of `results$Upper` is discouraged. Use `Upper` instead. ## Warning: Use of `results$Lower` is discouraged. Use `Lower` instead. Figure 2.1: Here is a plot of the CIs In this case only two out of 100 CIs do not include the true population mean. 2.2 The Central Limit Theorem Here we will also try to illustrate the Central Limit Theorem, in its most basic form, with a very simple example. First we draw 1000 samples (again of size 800), form , say, a Poisson distribution, of course we couldve drawn them from a uniform or an exponential as well. samples_2 &lt;- samples &lt;-plyr::rlply(1000, rpois(800, 2)) Now we calculate the mean for each sample: means &lt;- samples_2 %&gt;% lapply(., mean) %&gt;% as.data.frame() %&gt;% t() And now we plot a histogram of the resulting means: hist(t(means)) Figure 2.2: Histogram of the sampling distribution of the mean "],["equations-picture.html", "Chapter 3 Equations &amp; Picture 3.1 Bayes theorem 3.2 Normal PDF 3.3 Picture", " Chapter 3 Equations &amp; Picture 3.1 Bayes theorem \\[\\begin{equation} p(\\theta | D) = \\frac{p(D|\\theta) p(\\theta)} {p(D)} \\tag{3.1} \\end{equation}\\] 3.2 Normal PDF \\[\\begin{equation} f(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}}\\exp\\left(-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^{2}\\right) \\tag{3.2} \\end{equation}\\] This is how we refer to equations: -see equation (3.2) 3.3 Picture "],["an-introduction-to-bain.html", "An introduction to bain 3.4 Available tutorials 3.5 Usage", " An introduction to bain bain is an acronym for Bayesian informative hypotheses evaluation. It uses the Bayes factor (Kass &amp; Raftery, 1995) to evaluate hypotheses specified using equality and inequality constraints among (linear combinations of) parameters in a wide range of statistical models. 3.4 Available tutorials Two tutorials are retrievable from the bain website under the section Tutorials. The first introducing Bayesian evaluation of informative hypotheses is provided by Hoijtink, Mulder, van Lissa, &amp; Gu (2019). By reading the tutorial in combination with executing the analyses contained in easyBFtutorial.R and BFtutorial.R (available on the abovementioned website) you will quickly learn the basics of Bayesian hypothesis evaluation. The second containing introduction to Bayesian evaluation of informative hypotheses in the context of structural equation models is provided by Van Lissa, C., Gu, X., Mulder, J., Rosseel, Y., van Zundert, C. and Hoijtink, H. (2020), Structural Equation Modelling, 28, 292-3011. Users are advised to read these tutorials and this vignette before using bain. An overview of all other relevant papers concearning informative hypotheses testing and the package bain can be found here. 3.5 Usage This is how a general call to bain looks like: results &lt;- bain(x, hypothesis, fraction = 1, ...) 3.5.1 Arguments x An R object containing the outcome of a statistical analysis. Currently, the following objects can be processed: t_test() objects (Students t-test, Welchs t-test, paired samples t-test, one-group t-test, equivalence test). Note that, t_test can be used in the same way as t.test. lm() objects (ANOVA, ANCOVA, multiple regression). lavaan objects generated with the sem(), cfa(), and growth functions. A named vector containing the estimates resulting from a statistical analysis. Using this option triggers the bain.default() method. Note that, named means that each estimate has to be named such that it can be referred to in hypotheses. Wrapper functions for repeated measures ANOVA() and linear two-level models built with lmer (TBA when finished) hypothesis A character string containing the informative hypotheses to evaluate (see below the section on Specification of Hypotheses). fraction = 1 A number representing the fraction of information in the data used to construct the prior distribution (see, for example, Gu, Mulder, &amp; Hoijtink (2018)). The default value 1 denotes the minimal fraction, 2 denotes twice the minimal fraction, etc. The examples in the next chapter show how the fraction can be employed to execute a sensitivity analysis. See also Hoijtink, Mulder, van Lissa, &amp; Gu (2019) for more details. ... Additional arguments (see next chapter). 3.5.2 Using bain with a lm or t_test object The following steps need to be executed: x &lt;- lm() or x &lt;- t_test(). Execute an analysis with lm or t_test. See the Examples section below for a complete elaboration of the calls to lm and t_test that can be processed by bain. Note that, lm and t_test will apply list-wise deletion if there are cases with missing values in the variables used. If lm() is used, display the estimates and their names using the command coef(x). (Unique abbreviations of) the names will be used to specify hypotheses. If t_test() is used, hypotheses have to be specified using the names x, y, and difference (see Examples 1a throught 1e which can be found below). set.seed(seed). Set seed equal to an integer number to create a repeatable random number sequence. bain uses sampling to compute Bayes factors and posterior model probabilities. It is therefore recommended to run analyses with two different seeds to ensure stability of the results. results &lt;- bain(x,hypotheses,fraction = 1) or results &lt;- bain(x,hypotheses,fraction = 1,standardize = FALSE). The first call to bain is used in case of lm implementations of ANOVA, ANCOVA, and t_test. The second call to bain is used in case of lm implementations of multiple regression. With standardize = TRUE hypotheses with respect to standardized regression coefficients are evaluated. With standardize = FALSE hypotheses with respect to unstandardized regression coefficients are evaluated. fraction = 1represents the fraction of information in the data used to construct the prior distribution. The default value 1 denotes the minimal fraction, 2 denotes twice the minimal fraction, etc. Example 2d. below shows how fraction can be employed to execute a sensitivity analysis. See also Hoijtink, Mulder, van Lissa, and Gu, 2019). print(results) Print the results of an analysis with bain. summary(results, ci=0.95) Present estimates and credibility intervals for the parameters used to specify the hypotheses. ci can be used to specify the confidence level of the credibility intervals. 3.5.3 Using bain with a lavaan object The following steps need to be executed: x &lt;- sem() or x &lt;- cfa() or x &lt;- growth(). Execute an analysis with the sem, cfa, or growth functions implemented in lavaan. Note that, by default, lavaan will apply list-wise deletion if there are cases with missing values in the variables used. An imputation based method for dealing with missing values tailored to Bayesian hypothesis evaluation is illustrated in Section 4 Examples Using a Named Vector in Example h. (based on Hoijtink, Gu, Mulder, and Rosseel, 2019). If an analysis with lavaan is executed using missing = \"fiml\" the sample size is not corrected for the presence of missing values. This will affect (bias) the evaluation of hypotheses specified using (about) equality constraints. Specify a lavaan model using the model &lt;- ... command. In case of multiple group models, only models without between group restrictions can be processed by bain with a lavaan object as input. Display the estimates and their names using the command coef(x). Only parameters whos names contain ~ (regression coefficients), ~1 (intercepts), or =~ (factor loadings) can be used in the specification of hypotheses. (Unique abbreviations of) the names can be used to specify hypotheses. For multiple group analyses the names have to end with a group label .grp. Group labels can be assigned using commands like sesamesim$sex &lt;- factor(sesamesim$sex, labels = c(\"boy\", \"girl\")). If in a lavaan model parameters are labeled, e.g., as in model &lt;- 'age ~ c(a1, a2)*peabody + c(b1, b2)*1 then the labels have to be used in the specification of hypotheses. set.seed(seed). Set seed equal to an integer number to create a repeatable random number sequence. bain uses sampling to compute Bayes factors and posterior model probabilities. It is therefore recommended to run analyses with two different seeds to ensure stability of the results. results &lt;- bain(x,hypotheses,fraction = 1,standardize = FALSE). With standardize = TRUE hypotheses with respect to standardized coefficients are evaluated. With standardize = FALSE hypotheses with respect to unstandardized coefficients are evaluated. fraction = 1 represents the fraction of information in the data used to construct the prior distribution. The default value 1 denotes the minimal fraction, 2 denotes twice the minimal fraction, etc. Example 2d. below shows how fraction can be employed to execute a sensitivity analysis. See also Hoijtink, Mulder, van Lissa, and Gu, 2019). print(results) Print the results of an analysis with bain. summary(results, ci=0.95) Present estimates and credibility intervals for the parameters used to specify the hypotheses. ci can be used to specify the confidence level of the credibility intervals. 3.5.4 Using bain with a named vector The following steps need to be executed: Execute a statistical analysis. In case of a single group analysis, the following information has to be extracted from the statistical analysis and supplied to bain: A vector containing estimates of the parameters used to specify hypotheses; A list containing the covariance matrix of these parameters; and, The sample size used for estimation of the parameters. Note that, due to missing values this sample size may be smaller than the total sample size. In case of a multiple group analysis, the following information has to be extracted from the statistical analysis and supplied to bain: A vector containing estimates of the group specific parameters possibly augmented with the estimates of parameters that are shared by the groups. The structure of this vector is [parameters of group 1, parameters of group 2, , the parameters that are shared by the groups]; A list containing, per group, the covariance matrix of the parameters corresponding to the group at hand and, possibly, the augmented parameters. In the rows and columns of each covariance matrix the parameters of the group at hand come first, possibly followed by the augmented parameters. Per group the sample size used for estimation of the parameters. Note that, due to missing values this sample size may be smaller than the total sample size per group. Assign names to the estimates using names(estimates)&lt;-c(). Note that, names is a character vector containing new names for the estimates in estimates. Each name has to start with a letter, and may consist of letters, numbers, . _, : ~, =~, and ~1. These names are used to specify hypotheses (see below). An example is names &lt;- c(\"a\", \"b\", \"c\"). set.seed(seed). Set seed equal to an integer number to create a repeatable random number sequence. bain uses sampling to compute Bayes factors and posterior model probabilities. It is therefore recommended to run analyses with two different seeds to ensure stability of the results. results &lt;- bain(estimates, hypotheses, n=., Sigma=., group_parameters = 2, joint_parameters = 0, fraction = 1) executes bain with the following arguments: estimates A named vector with parameter estimates. hypotheses A character string containing the informative hypotheses to evaluate (the specification is elaborated below). n A vector containing the sample size of each group in the analysis. See, Hoijtink, Gu, and Mulder (2019), for an elaboration of the difference between one and multiple group analyses. A multiple group analysis is required when group specific parameters are used to formulate hypotheses. Examples are the Students and Welchs t-test, ANOVA, and ANCOVA. See the Examples section for elaborations of the specification of multiple group analyses when a named vector is input for bain. Sigma A list of covariance matrices. In case of one group analyses the list contains one covariance matrix. In case of multiple group analyses the list contains one covariance matrix for each group. See the Examples section and Hoijtink, Gu, and Mulder (2019) for further instructions. group_parameters The number of group specific parameters. In, for example, an ANOVA with three groups, estimates will contain three sample means, group_parameters = 1 because each group is characterized by one mean, and joint_parameters = 0 because there are no parameters that apply to each of the groups. In, for example, an ANCOVA with three groups and two covariates, estimates will contain five parameters (first the three adjusted means, followed by the regression coefficients of the two covariates), group_parameters = 1 because each group is characterized by one adjusted mean, and joint_parameters = 2 because there are two regression coefficients that apply to each group. In, for example, a repeated measures design with four repeated measures and two groups (a between factor with two levels and a within factor with four levels) estimates will contain eight means (first the four for group 1, followed by the four for group 2), group_parameters = 4 because each group is characterized by four means and joint_parameters = 0 because there are no parameters that apply to each of the groups. joint_parameters In case of one group joint_parameters = 0. In case of two or more groups, the number of parameters in estimates shared by the groups. In, for example, an ANCOVA, the number of joint_parameters equals the number of covariates. fraction = 1 A number representing the fraction of information in the data used to construct the prior distribution. The default value 1 denotes the minimal fraction, 2 denotes twice the minimal fraction, etc. Example 2d. below shows how fraction can be employed to execute a sensitivity analysis. See also Hoijtink, Mulder, van Lissa, and Gu, 2019). print(results) Print the results of an analysis with bain. summary(results, ci=0.95) Present estimates and credibility intervals for the parameters used to specify the hypotheses. ci can be used to specify the confidence level of the credibility intervals. 3.5.5 The specification of hypotheses hypotheses is a character string that specifies which informative hypotheses have to be evaluated. A simple example is hypotheses &lt;- \"a &gt; b &gt; c; a = b = c;\" which specifies two hypotheses using three estimates with names a, b, and c, respectively. The hypotheses specified have to adhere to the following rules bain may still run if you deviate from the rules, however, the output will be nonsense: When using bain with a lm or t_test or lavaan object, (unique abbreviations of) the names displayed by coef(x) have to be used (but see the section Using bain with a lavaan object for additional instructions if multiple group analyses are executed and/or parameters are labeled). If, for example, the names are cat and dog, c and d would be unique abbreviations. If, for example, the names are cato and cata the whole names have to be used. When using bain with a named vector, parameters are referred to using the names specified in names(). Linear combinations of parameters must be specified adhering to the following rules: Each parameter name is used at most once. Each parameter name may or may not be pre-multiplied with a number. A constant may be added or subtracted from each parameter name. A linear combination can also be a single number. Examples are: 3 * a + 5; a + 2 * b + 3 * c - 2; a - b; and 5. (Linear combinations of) parameters can be constrained using &lt;, &gt;, and =. For example, a &gt; 0 or a &gt; b = 0 or 2 * a &lt; b + c &gt; 5. The ampersand &amp; can be used to combine different parts of a hypothesis. For example, a &gt; b &amp; b &gt; c which is equivalent to a &gt; b &gt; c or a &gt; 0 &amp; b &gt; 0 &amp; c &gt; 0. Sets of (linear combinations of) parameters subjected to the same constraints can be specified using (). For example, a &gt; (b,c) which is equivalent to a &gt; b &amp; a &gt; c. The specification of a hypothesis is completed by typing ; For example, hypotheses &lt;- \"a &gt; b &gt; c; a = b = c;\", specifies two hypotheses. Hypotheses have to be compatible, non-redundant and possible. What these terms mean will be elaborated below. The set of hypotheses has to be compatible. For the statistical background of this requirement see Gu, Mulder, Hoijtink (2019). Usually the sets of hypotheses specified by researchers are compatible, and if not, bain will return an error message. The following steps can be used to determine if a set of hypotheses is compatible: Replace a range constraint, e.g., 1 &lt; a1 &lt; 3, by an equality constraint in which the parameter involved is equated to the midpoint of the range, that is, a1 = 2. Replace in each hypothesis the &lt; and &gt; by =. For example, a1 = a2&gt; a3 &gt; a4 becomes a1 = a2 = a3 = a4. The hypotheses are compatible if there is at least one solution to the resulting set of equations. For the two hypotheses considered under 1. and 2., the solution is a1 = a2 = a3 = a4 = 2. An example of two non-compatible hypotheses is hypotheses &lt;- \"a = 0; a &gt; 2;\" because there is no solution to the equations a=0 and a=2. Each hypothesis in a set of hypotheses has to be non-redundant. A hypothesis is redundant if it can also be specified with fewer constraints. For example, a = b &amp; a &gt; 0 &amp; b &gt; 0 is redundant because it can also be specified as a = b &amp; a &gt; 0. bain will work correctly if hypotheses specified using only &lt; and &gt; are redundant. bain will return an error message if hypotheses specified using at least one = are redundant. Each hypothesis in a set of hypotheses has to be possible. An hypothesis is impossible if estimates in agreement with the hypothesis do not exist. For example: values for a, b, c in agreement with a &gt; b &gt; c &amp; a &lt; c do not exist. It is the responsibility of the user to ensure that the hypotheses specified are possible. If not, bain will either return an error message or render an output table containing Infs. 3.5.6 Output The commands bain() or results&lt;-bain() followed by results or print(results) will render the default (most important) output from bain. These concern for each hypothesis specified in hypotheses the fit, complexity, Bayes factor versus the unconstrained hypothesis, Bayes factor versus its complement, posterior model probability (based on equal prior model probabilities) excluding the unconstrained hypothesis, posterior model probability including the unconstrained hypothesis, and posterior model probability of each hypothesis specified and their joint complement. Note that, all the posterior model probabilities are computed from the Bayes factors of each hypothesis versus the unconstrained hypothesis. In Hoijtink, Mulder, van Lissa, and Gu (2019) it is elaborated how these quantities (and the other output presented below) should be interpreted. Additionally, using summary(results, ci=0.95), a descriptives matrix can be obtained in which for each estimate, the name, the value, and a 95% central credibility interval is presented. The following commands can be used to retrieve the default and additional information from the bain output object: results$fit renders the default output, results$fit$Fit contains only the column containing the fit of each hypothesis. In the last command Fit can be replaced by Com, BF, BF.u, BF.c, PMPa, PMPb, PMPc to obtain the information in the corresponding columns of the default output. Note that, in the columns BF and BF.c the Bayes factor of the hypothesis at hand versus its complement is displayed. In the column BF.u the Bayes factor of the hypothesis at hand versus the unconstrained hypothesis is displayed. PMPa renders the posterior model probabilities (based on equal prior model probabilities) of the hypotheses specified. PMPb renders the posterior model probabilities (based on equal prior model probabilities) of the hypotheses specified plus the unconstrained hypothesis. PMPc renders the posterior model probabilities (based on equal prior model probabilities) of the hypotheses specified plus the complement of the union of these hypotheses. If, in the latter case, the complexity of the complement of the union of all hypotheses specified is smaller than .05, the hypotheses specified (almost) completely cover the parameter space. In this case PMPc is not provided and instead PMPa should be used. results$BFmatrix contains the matrix containing the mutual Bayes factors of the hypotheses specified in hypotheses. results$b contains for each of the groups in the analysis the fraction of information of the data in the group at hand used to specify the covariance matrix of the prior distribution. results$prior contains the covariance matrix of the prior distribution. results$posterior contains the covariance matrix of the posterior distribution. results$call displays the call to bain. results$model displays the named vector or the R object that is input to bain. results$n displays the sample sizes per group. results$independent_restrictions displays the number of independent constraints in the set of hypotheses under consideration. Note that, in Gu, Mulder, and Hoijtink (2018) en Hoijtink, Gu, and Mulder (2019) the definition given was misprinted (besides R and S also r and s should have been added to the definition). results$fit$Fit_eq displays the fit of the equality constrained part of each hypothesis. Replacing Fit_eq by Fit_in, renders the fit of the inequality constrained part of an hypothesis conditional on the fit of the equality constrained part. Com_eq, and Com_in, respectively, are the complexity counterparts of Fit_eq, and Fit_in. Note that, if you have specified two hypotheses that both have a small BF.u (close to zero), then there is no support in the data for these hypotheses. In these cases the corresponding entry in results$BFmatrix (the Bayes factor comparing both hypotheses) is very unstable and should only be interpreted if repeated analyses using different seeds (see set.seed()) render about the same results. Users are advised to read these tutorials and this vignette before using bain. "],["examples-using-bain.html", "Chapter 4 Examples using bain", " Chapter 4 Examples using bain Note that, each of the examples given below can be run by 1) copy pasting them into the Source screen of RStudio. 2) by highlighting them followed by ctrl-enter or cmd-enter. Unless indicated otherwise, the examples that follow below use a simulated data set inspired by the Sesame Street data set from: Stevens (1996). This data set is included in the bain package. The variables contained in sesamesim are subsequently: sex (1 = boy, 2 = girl) of the child site (1 = disadvantaged inner city, 2 = advantaged suburban , 3 = advantaged rural, 4 = disadvantaged rural, 5 = disadvantaged Spanish speaking) from which the child originates setting (1 = at home, 2 = at school) in which the child watches sesame street age (in months) of the child viewenc (0 = no, 1 = yes), whether or not the child is encouraged to watch Sesame Street peabody (mental age) score of the child (higher score is higher mental age) prenumb (score on a numbers test before watching Sesame Street for a year) postnumb (score on a numbers test after watching Sesame Street for a year) funumb (follow up numbers test score measured one year after postnumb) Bb Knowledge of body parts before Bl Knowledge of letters before Bf Knowledge of forms before Bn Knowledge of numbers before Br Knowledge of relations before Bc Knowledge of classifications before Ab Knowledge of body parts after Al Knowledge of letters after Af Knowledge of forms after An Knowledge of numbers after Ar Knowledge of relations after Ac Knowledge of classifications after The examples that follow below are organized in four categories: running bain with a t_test object running bain with a lm object running bain with a lavaan object running bain with a named vector "],["references.html", "References", " References "],["appendix-a.html", "Appendix A", " Appendix A "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
